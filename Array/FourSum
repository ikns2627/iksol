Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note:

The solution set must not contain duplicate quadruplets.

Example:

Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]

One more loop on top of 3 Sum

/**
 * Question Link: https://leetcode.com/problems/4sum/
 * Primary idea: Sort the array, and traverse it, increment left or decrease right 
 *               predicated on their sum is greater or not than the target
 * Time Complexity: O(n^3), Space Complexity: O(nC4)
 */


class Solution {
    func threeSum(_ nums: [Int]) -> [[Int]] {
        guard nums.count > 3 else{return []}
        var res = [[Int]]()
        var count = nums.count
        var nums = nums.sorted{return $0 < $1}
        var i = 0
        while i < nums.count-2{
            var first = nums[i]
            var target = -first
            var left = i+1
            var right = count-1
            while left < right{
                var second = nums[left]
                var third = nums[right]
                if second+third < target{
                    left += 1
                    continue
                }
                if second+third > target{
                    right -= 1
                    continue
                }
                res.append([first, second, third])
                while left<count-2 && nums[left] == second{
                    left += 1
                }
                while left<right && nums[right] == third{
                    right -= 1
                }
            }
            while i < count-2 && nums[i] == first{
                i += 1
            }
        }
        return res
    }
}