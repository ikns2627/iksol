
Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

Note:

The number of elements initialized in nums1 and nums2 are m and n respectively.
You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.
Example:

Input:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3

Output: [1,2,2,3,5,6]


Solution: Get sorted Arrays of start and end times and compare start with end… if start < end, needs a new room or else move to next start and end times…

/**
* public class Interval {
 *   public var start: Int
 *   public var end: Int
 *   public init(_ start: Int, _ end: Int) {
 *     self.start = start
 *     self.end = end}}
*/
class Solution {
    func minMeetingRooms(_ intervals: [Interval]) -> Int {
        let ss = intervals.map{ivl in ivl.start}.sorted()
        let es = intervals.map{ivl in ivl.end}.sorted()
        var i=0, j=0, count=0
        while (i < ss.count && j < es.count){
            if ss[i]<es[j]{
                count += 1
                i += 1
            }else{
                j += 1
                i += 1
            }
        }
        return count
    }
}
