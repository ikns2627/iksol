Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1


* Primary idea: Binary Search, check left or right is sorted, then search in the part  
 *
 * Time Complexity: O(logn), Space Complexity: O(1)
 */

 class Solution {
    func search(_ nums: [Int], _ target: Int) -> Int {
        guard nums.count > 0 else{return -1}
        var left = 0 
        var right = nums.count - 1
        var mid = 0
         while left <= right{
             mid = left + (right - left)/2
             if target == nums[mid]{
                 return mid
             }
             if nums[mid] >= nums[left]{
             	//Check if it exist in the left half 
                 if target >= nums[left] && target < nums[mid]{ 
                     right = mid - 1 //if so move towards left
                 }else{
                     left = mid + 1 // or else move towards ight
                 }
                 
             }else{
             // vice versa
                 if target <= nums[right] && target > nums[mid]{
                     left = mid + 1
                 }else{
                     right = mid - 1
                 }
             }
         }
        return -1
    }
}