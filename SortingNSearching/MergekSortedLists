Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

Example:

Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6

Solutions: Lets say we have k value as 5, we merge 
0,4->0
1,3->1

0,2->0

0,1->0 Finally we have the merged Node at 0

* Primary idea: Divide and Conqure with merge two sorted lists as a helper function
 * Time Complexity: O(mlogn), m stands for the length of one list, n stands for the number of lists
 *                  Space Complexity: O(1)
 
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */
class Solution {
    func mergeKLists(_ lists: [ListNode?]) -> ListNode? {
        guard lists.count > 0 else {
            return nil
        }
        var left = 0, right = lists.count - 1
        var lists = lists
        while right > 0 {
            left = 0
            while left < right{
                lists[left] = mergeTwoLists(lists[left], lists[right])
                left += 1
                right -= 1
            }
        }
        return lists[0]
    }
    
    func mergeTwoLists(_ l1: ListNode?, _ l2: ListNode?) -> ListNode?{
        var l1 = l1 
        var l2 = l2
        var res = ListNode(0)
        var node = res
        while l1 != nil && l2 != nil{
            if l1!.val > l2!.val{
                node.next = l2
                l2 = l2!.next
            }else{
                node.next = l1
                l1 = l1!.next                
            }
            node = node.next!
        }
        node.next = l1 ?? l2
        
        return res.next
        
    }
}
